#include "SymbolTable.h"
#include "SymbolFactory.h"
#include "Kind.h"
// #include <string>
#include <charconv>
// #include <system_error>


COMPILER MIEC

    SymbolTable   *tab;
    SymbolFactory *fac;
    // CodeGenerator *gen;

	void Err(wchar_t* msg) {
		errors->Error(la->line, la->col, msg);
	}

	int // types
	  undef, integer;

	void InitDeclarations() { // it must exist
		undef = 0; integer = 1; // types
	}


  
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.

/*--------------------------------------------------------------------------*/
TOKENS
  ident  = letter {letter | digit}.
  number = digit {digit}.
  
    
COMMENTS
  FROM "(*" TO "*)" NESTED


IGNORE cr + lf + tab


/*--------------------------------------------------------------------------*/
PRODUCTIONS
  MIEC =  "PROGRAM" ident
          [VarDecl]
          "BEGIN"
          Statements
          "END" .


  VarDecl =                 (. wchar_t* name; Kind type; .)
  "BEGIN_VAR"
  Ident<name> ":"
  Type<type> ";"            (. if(!tab->Add( name, type)){Err(L"Insert new var failed");} .)
  {Ident<name> ":"
  Type<type> ";"}           (. if(!tab->Add( name, type)){Err(L"Insert new var failed");} .)
  "END_VAR" .

  Statements = Stat {Stat} .

  Stat =   ident ":=" Expr ";"
         | "print" "(" Expr ")" ";"
         | "WHILE" Condition "DO" Statements "END"
         | "IF" Condition "THEN" Statements ["ELSE" Statements] "END" .

  Expr = Term { ("+"|"-") Term } .

  Term = Fact { ("*"|"/") Fact } .

  Fact =                (. int value; wchar_t* name; .)
  ( Ident<name>			(. if(tab->Find(name) == nullptr){Err(L"Variable not defined");} .)
  | Number<value>       (. tab->Add( value); .)
  | "(" Expr ")" 
  ).

  Condition = Expr Relop Expr .

  Relop =   "="
          | "<="
          | ">="
          | "!="
          | "<"
          | ">" .

/*------------------------------------------------------------------------*/
  Ident<wchar_t* &name>
= ident                  (. name = coco_string_create(t->val); .)
.

/*------------------------------------------------------------------------*/
Number<int& value> = 
number                    (. int ret = swscanf(t->val, L"%d", &value);
                             if (ret < 1) Err(L"parsing number failed"); .)
.

/*------------------------------------------------------------------------*/
Type<Kind &type>
=                        (. type = Kind::eUndef; .)
 ( "Integer"             (. type = Kind::eInt; .)
 ).



/* MIEC = . */


END MIEC .
