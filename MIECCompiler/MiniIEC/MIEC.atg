#include "SymbolTable.h"
#include "SymbolFactory.h"
#include "Kind.h"
#include "OpKind.h"
#include "DACGenerator.h"
// #include <string>
#include <charconv>
// #include <system_error>


COMPILER MIEC

    SymbolTable   *tab;
    SymbolFactory *fac;
    DACGenerator dac;
    
    // CodeGenerator *gen;

	void Err(wchar_t* msg) {
		errors->Error(la->line, la->col, msg);
	}

	int // types
	  undef, integer;

	void InitDeclarations() { // it must exist
		undef = 0; integer = 1; // types
	}


  
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.

/*--------------------------------------------------------------------------*/
TOKENS
  ident  = letter {letter | digit}.
  number = digit {digit}.
  
    
COMMENTS
  FROM "(*" TO "*)" NESTED


IGNORE cr + lf + tab


/*--------------------------------------------------------------------------*/
PRODUCTIONS
  MIEC =  "PROGRAM" ident
          "BEGIN_VAR"
          [VarDecl]
          "END_VAR"
          "BEGIN"
          Statements
          "END" .


  VarDecl =                 (. wchar_t* name; Kind type; .)
  Ident<name> ":"
  Type<type> ";"            (. if(!tab->Add( name, type)){Err(L"Insert new var failed");} .)
  {Ident<name> ":"
  Type<type> ";"            (. if(!tab->Add( name, type)){Err(L"Insert new var failed");} .)}
  .

  Statements = Stat {Stat} .

  Stat =   ident ":=" Expr ";"
         | "print" "(" Expr ")" ";"
         | "WHILE" Condition "DO" Statements "END"
         | "IF" Condition "THEN" Statements ["ELSE" Statements] "END" .

  Condition<Operand* op, Operand* op2>  (. OpKind opKind; .)
  = Expr<op>
  [ Relop<opKind>
    Expr<op2>                           (. dac.AddStat(opKind, op, op2) .)
  ].

  Expr<Operand* op, Operand* op2> = (. OpKind opKind; .)
    Term<op>
    { AddOp<opKind>
      Term<op2>                     (. dac.AddStat(opKind, op, op2) .)
    } .

  Term<Operand* op, Operand* op2> = (. OpKind opKind; .)
  Fact<op> 
  { MulOp<opKind>
    Fact<op2>           (. dac.AddStat(opKind, op, op2) .)
  } .

  Fact<Operand* op> =   (. int value; wchar_t* name; Operand* op; Symbol* sym; .)
  ( Ident<name>			(. sym = tab->Find(name); if(sym == nullptr){Err(L"Variable not defined");}
                           op = new SymOperand(sym); .)
  | Number<value>       (. sym = tab->Find(name); if(sym == nullptr){sym = tab->Add(value);}
                           op = new SymOperand(sym); .)
  | "(" Expr<op> ")" 
  ).

  Relop =   "="
          | "<="
          | ">="
          | "!="
          | "<"
          | ">" .

/*------------------------------------------------------------------------*/
  Ident<wchar_t* &name>
= ident                  (. name = coco_string_create(t->val); .)
.

/*------------------------------------------------------------------------*/
Number<int& value> = 
number                    (. int ret = swscanf(t->val, L"%d", &value);
                             if (ret < 1) Err(L"parsing number failed"); .)
.

/*------------------------------------------------------------------------*/
Type<Kind &type>
=                        (. type = Kind::eUndef; .)
 ( "Integer"             (. type = Kind::eInt; .)
 ).

/*------------------------------------------------------------------------*/
MulOp<OpKind op>
=
  ( '*'                  (. op = OpKind::eMultiply; .)
  | '/'                  (. op = OpKind::eDivide; .)
  ).
/*------------------------------------------------------------------------*/
AddOp<OpKind op>
=
  ( '+'	                 (. op = OpKind::eAdd; .)
  | '-'                  (. op = OpKind::eSubtract; .)
  ).

/* MIEC = . */


END MIEC .
