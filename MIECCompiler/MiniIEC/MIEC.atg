#include "SymbolTable.h"
#include "SymbolFactory.h"
#include "Kind.h"
#include "OpKind.h"
#include "DACGenerator.h"
#include "DACEntry.h"
#include "Type.h"
// #include <string>
#include <charconv>
// #include <system_error>


COMPILER MIEC

    SymbolTable   *tab;
    SymbolFactory *fac;
    DACGenerator dac;
    
    // CodeGenerator *gen;

    void Err(wchar_t* msg) {
        errors->Error(la->line, la->col, msg);
    }

    int // types
      undef, integer;

    void InitDeclarations() { // it must exist
        undef = 0; Integer = 1; // types
    }


    const Type *getIntegerType() {
        constexpr wchar_t* typeName = L"[Type]Integer";
        Symbol *sym = tab->Find(typeName);
        if (!sym || sym->GetType() != Kind::eType) {
            sym = tab.Insert(fac->CreateTypeSym(typeName, Kind::eInt));
        }
        return sym->GetType();
    }


  
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.

/*--------------------------------------------------------------------------*/
TOKENS
  ident  = letter {letter | digit}.
  number = digit {digit}.
  
    
COMMENTS
  FROM "(*" TO "*)" NESTED


IGNORE cr + lf + tab


/*--------------------------------------------------------------------------*/
PRODUCTIONS
  MIEC =  "PROGRAM" ident
          "BEGIN_VAR"
          [VarDecl]
          "END_VAR"
          "BEGIN"
          Statements
          "END" .


  VarDecl =                 (. wchar_t* name; Kind type; .)
  Ident<name> ":"
  Type<type> ";"            (. if(!tab->Add( name, type)){Err(L"Insert new var failed");} .)
  {Ident<name> ":"
  Type<type> ";"            (. if(!tab->Add( name, type)){Err(L"Insert new var failed");} .)}
          .

/*------------------------------------------------------------------------*/
Statements = Stat{ Stat } .

Stat =                                          (. std::unique_ptr<DACEntry> entry; .)
Assignment<entry>                               (. dac.AddStat(std::move(entry)) .)
| "print" "(" Expr ")" ";"                      // TODO
| Controlblock
.
    
              
Controlblock =
"WHILE" Condition "DO" Statements "END"
| "IF" Condition "THEN" Statements["ELSE" Statements] "END"
.


/*------------------------------------------------------------------------*/
Assignment <. std::unique_ptr<DACEntry> entry .> =  (.wchar_t* name;
                                                    Type* type = nullptr;
                                                    Symbol* sym = nullptr;
                                                    std::unique_ptr<DACEntry> expr; .)
  Ident<name>                                       (.  sym = tab->Find(name).get();
                                                    if (sym == nullptr) Err(L"Variable not defined");  .)

 ":=" Expr                                          (.entry = MIEC::DACFactory::createEntry(OpKind.eAssign,
                                                            MIEC::DACFactory::createSymOperand(sym),
                                                            MIEC::DACFactory::createDACOperand(expr)); 
                                                    .)
.




  Condition<Operand* op, Operand* op2>  (. OpKind opKind; .)
  = Expr<op>
  [ Relop<opKind>
    Expr<op2>                           (. dac.AddStat(opKind, op, op2) .)
  ].




  Expr<Operand* op, Operand* op2> = (. OpKind opKind; .)
    Term<op>
    { AddOp<opKind>
      Term<op2>                     (. dac.AddStat(opKind, op, op2) .)
    } .




  Term<Operand* op, Operand* op2> = (. OpKind opKind; .)
  Fact<op> 
  { MulOp<opKind>
    Fact<op2>                       (. dac.AddStat(opKind, op, op2) .)
  } .




  Fact<Operand* op> =               (. int value; wchar_t* name; Operand* op; Symbol* sym; .)
  ( Ident<name>			            (. sym = tab->Find(name); if(sym == nullptr){Err(L"Variable not defined");}
                                       op = new SymOperand(sym); .)
  | Number<value>                   (. sym = tab->Find(name); if(sym == nullptr){sym = tab->Add(value);}
                                       op = new SymOperand(sym); .)
  | "(" Expr<op> ")" 
  ).




  Relop < OpKind op > = "="         (.op = OpKind::eIsEqual; .)
                      | "<="        (.op = OpKind::eIsLessEqual; .)
                      | ">="        (.op = OpKind::eIsGreaterEqual; .)
                      | "!="        (.op = OpKind::eIsNotEqual; .)
                      | "<"         (.op = OpKind::eIsLess; .)
                      | ">"         (.op = OpKind::eIsGreater; .)
                      .

/*------------------------------------------------------------------------*/
  Ident<wchar_t* &name>
= ident                  (. name = coco_string_create(t->val); .)
.

/*------------------------------------------------------------------------*/
Number<int& value> = 
number                    (. int ret = swscanf(t->val, L"%d", &value);
                             if (ret < 1) Err(L"parsing number failed"); .)
.

/*------------------------------------------------------------------------*/
Type<Kind &type>
=                        (. type = Kind::eUndef; .)
 ( "Integer"             (. type = Kind::eInt; .)
 ).

/*------------------------------------------------------------------------*/
MulOp<OpKind op>
=
  ( '*'                  (. op = OpKind::eMultiply; .)
  | '/'                  (. op = OpKind::eDivide; .)
  ).
/*------------------------------------------------------------------------*/
AddOp<OpKind op>
=
  ( '+'	                 (. op = OpKind::eAdd; .)
  | '-'                  (. op = OpKind::eSubtract; .)
  ).

/* MIEC = . */


END MIEC .
