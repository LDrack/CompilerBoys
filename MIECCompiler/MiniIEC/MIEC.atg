#include "../SymbolTable.h"
#include "../SymbolFactory.h"
// #include <string>
#include <charconv>
// #include <system_error>


COMPILER MIEC

    SymbolTable   *tab;
    SymbolFactory *fac;
    // CodeGenerator *gen;

	void Err(wchar_t* msg) {
		errors->Error(la->line, la->col, msg);
	}


  
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.

/*--------------------------------------------------------------------------*/
TOKENS
  ident  = letter {letter | digit}.
  number = digit {digit}.
  
    
COMMENTS
  FROM "(*" TO "*)" NESTED


IGNORE cr + lf + tab


/*--------------------------------------------------------------------------*/
PRODUCTIONS
  MIEC =  "PROGRAM" ident
          [VarDecl]
          "BEGIN"
          Statements
          "END" .


  VarDecl =   "BEGIN_VAR"
              ident ":" "Integer" ";" {ident ":" "Integer" ";"}
              "END_VAR" .

  Statements = Stat {Stat} .

  Stat =   ident ":=" Expr ";"
         | "print" "(" Expr ")" ";"
         | "WHILE" Condition "DO" Statements "END"
         | "IF" Condition "THEN" Statements ["ELSE" Statements] "END" .

  Expr = Term { ("+"|"-") Term } .

  Term = Fact { ("*"|"/") Fact } .

  Fact =                (. int value; .)
  ( Ident<name> 
  | Number<value>       (. symtab.Add( symfac.CreateConstInt(value)); .)
  | "(" Expr ")" 
  ).

  Condition = Expr Relop Expr .

  Relop =   "="
          | "<="
          | ">="
          | "!="
          | "<"
          | ">" .

/*------------------------------------------------------------------------*/
  Ident<wchar_t* &name>
= ident                  (. name = coco_string_create(t->val); .)
.

/*------------------------------------------------------------------------*/
Number<int& value> = 
number                    (. int ret = swscanf(t->val, L"%d", &value);
                             if (ret < 1) Err(L"parsing number failed"); .)
.




/* MIEC = . */


END MIEC .
