#include "../SymbolTable.h"
#include "../SymbolFactory.h"
#include <string>
#include <charconv>
#include <system_error>
COMPILER MIEC
 

 SymbolTable& symtab{ SymbolTable::GetInstance()};
 SymbolFactory& symfac {SymbolFactory::GetInstance()};
  
  std::string name {};


  void Err(std::string const & msg) {
		std::cerr << "line: " << la->line << " col: " << la->col << "msg: " << msg << std::endl;
	}


static std::string wcharToString(wchar_t const* const value) {

    if (value == nullptr) {
        return std::string{};
    }

    int len = wcslen(value);
    char* res = new char[len + 1];
    for (int i = 0; i < len; ++i) {
        res[i] = (char)value[i];
    }
    res[len] = 0;
    std::string ret{ res };
    delete[] res;
    return ret;
}


CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789". 
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
  
TOKENS
  ident  = letter {letter | digit}. 
  number = digit {digit}.
  
COMMENTS
  FROM "(*" TO "*)" NESTED


  IGNORE cr + lf + tab
   
PRODUCTIONS

MIEC = "PROGRAM"                  (. symtab.Print("Program keyword found"); .)
Ident<name> [VarDecl] 
"BEGIN" 
Statements 
"END" .

VarDecl =  
"BEGIN_VAR" Ident<name>           (. if(!symtab.Add( symfac.CreateIntVar(name))){Err("insert new var failed");} .)
 ':' "Integer"
 ';' {Ident<name>                 (. if(!symtab.Add( symfac.CreateIntVar(name))){Err("insert new var failed");} .)
 ':' "Integer" ';'} "END_VAR".

Statements = Stat {Stat} .

Stat = ( Ident<name> ":=" Expr ';' ) 
     | ( "print" '(' Expr ')' ';' )
     | ( "WHILE" Condition "DO" Statements "END" )
     | ( "IF" Condition "THEN" Statements [ "ELSE" Statements ] "END" ) .

Expr = ( Term [ ( '-' | '+' ) Term  ] ).

Term = ( Fact [ ('*'|'/') Fact]) .

Fact =                            (. int value; .)
    ( Ident<name>                 (. .)
     | Number<value>              (. symtab.Add( symfac.CreateConstInt(value)); 
     
     .)
     | '(' Expr ')' 
     ).

Condition = Expr Relop Expr .

Relop = '='
      | "<="
      | ">="
      | "!="
      | "<"
      | ">" .



/*------------------------------------------------------------------------*/
Number<int& value> = 
number                    (. std::string str{wcharToString(t->val)};
                              auto [ptr, ec] { std::from_chars(str.data(), str.data() + str.size(), value) }; 
                               if(ec == std::errc()){Err("parsing number failed");}
                                .)
.

Ident<std::string & name>
= ident                  (. name = wcharToString(t->val); .)
.
/*------------------------------------------------------------------------*/


END MIEC .